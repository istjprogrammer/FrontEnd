10번
재귀함수(recursive function)는 함수가 자기 자신을 호출하는 것을 말합니다. 즉, 함수가 실행 중에 자기 자신을 호출하여 문제를 해결하는 방법입니다.

콜백 함수(callback function)는 다른 함수에게 인자(argument)로 전달되는 함수입니다. 이 함수는 호출되어 실행되는 것이 아니라, 다른 함수에서 특정 이벤트가 발생했을 때 호출됩니다.

9번
function isPrime(n) {
	if(num === 1) return false;
 	for(let i = 2; i < num; i++) {
  		if(num % i === 0) return false;
         } 
     return true;
}

8번
const target = document.querySelector(".target");
const beforeBegin = document.createElement("p");
const afterBegin = document.createElement("p");
const beforeEnd = document.createElement("p");
const afterEnd = document.createElement("p");

beforeBegin.innerText = "beforeBegin";
afterBegin.innerText = "afterBegin";
beforeEnd.innerText = "beforeEnd";
afterEnd.innerText = "afterEnd";

container.insertAdjacentElement("beforebegin", beforeBegin);
container.insertAdjacentElement("afterbegin", afterBegin);
container.insertAdjacentElement("beforeend", beforeEnd);
container.insertAdjacentElement("afterend", afterEnd);

7번
Node는 HTML 요소, 텍스트, 주석 등 모든 것을 의미하고  Element는 HTML 요소만을 의미합니다.

6번
<!DOCTYPE html>
<html>

<head>
    <style>
        #cell {
            background-color: #FFFFFF;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <span id="cell">마우스 이벤트</span>

    <script>
        const cellSpan = document.getElementById('cell');

        cellSpan.addEventListener('mouseover', function () {
            cellSpan.style.backgroundColor = '#550000';
        });

        cellSpan.addEventListener('mouseout', function () {
            cellSpan.style.backgroundColor = '#FFFFFF';
        });

        cellSpan.addEventListener('click', function () {
            alert('cell에서 click됨');
        });
    </script>
</body>

</html>

5번
const fruitName = 'Apple, Banana, Cherry';
        const reverseSiteName = reverseStr(fruitName);
        console.log(reverseSiteName);

        function reverseStr(str) {
            let result = '';
            for (let i = str.length - 1; i >= 0; i--) {
                result = result + str[i];
            }
            return result;
}

4번
<!DOCTYPE html>
<html>

<head>
</head>

<body>
    <div class="parent">
        <!-- 주석 -->
        <div class="child">1</div>
        텍스트1
        <div id="child2" class="child">2</div>
        텍스트2
        <div id="child3" class="child">3</div>
    </div>
</body>

<script>
    // 두 번째와 세 번째 div 요소 가져오기
    const child2 = document.getElementById('child2');
    const child3 = document.getElementById('child3');

    // div 요소를 배열로 저장
    const divElements = [child2, child3];

    // 역순으로 정렬
    divElements.reverse();

    // 정렬된 div 요소를 부모 요소에 다시 추가
    const parent = document.querySelector('.parent');
    divElements.forEach(div => {
        parent.appendChild(div);
    });
</script>

</html>

3번
함수가 선언되어 있는 코드를 유효한 범위 내에서 제일 상위로 끌어 올려서 동작하게 하는 개념

2번
let a = 0.1;
let b = 0.2;
 
let result = (a + b).toFixed(3);
 
console.log(result);

1번
String, Number, Boolean, Undefined, Null, Object, Array, Function